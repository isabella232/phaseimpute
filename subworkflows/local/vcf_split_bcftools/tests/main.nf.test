nextflow_workflow {

    name "Test Subworkflow VCF_SPLIT_BCFTOOLS"
    script "../main.nf"

    config "./nextflow.config"

    workflow "VCF_SPLIT_BCFTOOLS"

    tag "subworkflows"
    tag "subworkflows_local"
    tag "subworkflows/vcf_split_bcftools"
    tag "vcf_split_bcftools"

    tag "bcftools"
    tag "bcftools/split"

    test("Split multiple vcf file") {
        setup {
            run("BCFTOOLS_MERGE") {
                script "../../../../modules/nf-core/bcftools/merge/main.nf"
                process {
                """
                input[0] = Channel.of(
                    [
                        [id: "allSamples"],
                        [file(params.pipelines_testdata_base_path + "hum_data/individuals/NA12878/NA12878.s_imputed.bcf", checkIfExist:true),
                        file(params.pipelines_testdata_base_path + "hum_data/individuals/NA19401/NA19401.s_imputed.bcf", checkIfExist:true),
                        file(params.pipelines_testdata_base_path + "hum_data/individuals/NA20359/NA20359.s_imputed.bcf", checkIfExist:true)],
                        [file(params.pipelines_testdata_base_path + "hum_data/individuals/NA12878/NA12878.s_imputed.bcf.csi", checkIfExist:true),
                        file(params.pipelines_testdata_base_path + "hum_data/individuals/NA19401/NA19401.s_imputed.bcf.csi", checkIfExist:true),
                        file(params.pipelines_testdata_base_path + "hum_data/individuals/NA20359/NA20359.s_imputed.bcf.csi", checkIfExist:true)],
                        []
                    ]
                )
                input[1] = Channel.of([
                    [id: "GRCh38"],
                    file(params.pipelines_testdata_base_path + "hum_data/reference_genome/GRCh38.s.fa.gz", checkIfExist:true),
                    file(params.pipelines_testdata_base_path + "hum_data/reference_genome/GRCh38.s.fa.gz.fai", checkIfExist:true),
                ])
                """
                }
            }
        }
        when {
            workflow {
                """
                input[0] = BCFTOOLS_MERGE.out.vcf.join(BCFTOOLS_MERGE.out.tbi)
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.versions,
                    workflow.out.vcf_tbi.collect{[
                        it[0],
                        path(it[1]).getFileName().toString(),
                        path(it[2]).getFileName().toString()
                    ] },
                    workflow.out.vcf_tbi.collect{
                        path(it[1]).vcf.summary
                    }
                ).match() },
                { workflow.out.vcf_tbi.collect{
                    assert path(it[1]).vcf.sampleCount == 1
                }}
            )
        }
    }

    test("Split one sample vcf file") {
        when {
            workflow {
                """
                input[0] = Channel.of([
                    [id: 'NA12878'],
                    file(params.pipelines_testdata_base_path + "hum_data/individuals/NA12878/NA12878.s_imputed.bcf", checkIfExist:true),
                    file(params.pipelines_testdata_base_path + "hum_data/individuals/NA12878/NA12878.s_imputed.bcf.csi", checkIfExist:true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.versions,
                    workflow.out.vcf_tbi.collect{[
                        it[0],
                        path(it[1]).getFileName().toString(),
                        path(it[2]).getFileName().toString()
                    ] }
                ).match() }
            )
        }
    }

    test("Split no sample vcf file") {
        tag "error"
        when {
            workflow {
                """
                input[0] = Channel.of([
                    [id: 'dbsnp_146.hg38'],
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/vcf/dbsnp_146.hg38.vcf.gz", checkIfExist:true),
                    file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/vcf/dbsnp_146.hg38.vcf.gz.tbi", checkIfExist:true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.error },
                { assert snapshot(
                    workflow.out.stdout
                ).match()
                }
            )
        }
    }
}
