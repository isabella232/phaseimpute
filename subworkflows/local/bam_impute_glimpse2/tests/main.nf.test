nextflow_workflow {

    name "Test Subworkflow BAM_IMPUTE_GLIMPSE2"
    script "../main.nf"
    config "./nextflow.config"

    workflow "BAM_IMPUTE_GLIMPSE2"

    tag "subworkflows"
    tag "subworkflows_local"
    tag "subworkflows/bam_impute_glimpse2"
    tag "bam_impute_glimpse2"

    tag "glimpse2"
    tag "glimpse2/phase"
    tag "glimpse2/ligate"
    tag "bcftools"
    tag "bcftools/index"

    test("Impute with glimpse2 one vcf - input bcf") {
        when {
            workflow {
                """
                input[0] = Channel.fromList([
                    [
                        [id: "NA12878"],
                        file(params.pipelines_testdata_base_path + "hum_data/individuals/NA12878/NA12878.s.bcf", checkIfExist:true),
                        file(params.pipelines_testdata_base_path + "hum_data/individuals/NA12878/NA12878.s.bcf.csi", checkIfExist:true),
                        []
                    ]
                ])
                input[1] = Channel.of([
                        [id: "1000GP", chr: "22"],
                        file(params.pipelines_testdata_base_path + "hum_data/panel/chr22/1000GP.chr22.s.norel.vcf.gz", checkIfExist:true),
                        file(params.pipelines_testdata_base_path + "hum_data/panel/chr22/1000GP.chr22.s.norel.vcf.gz.csi", checkIfExist:true),
                    ]).collect()
                input[2] = Channel.of(
                    [[chr: "22", id: "1000GP"], "chr22:16570065-16597215", "chr22:16570065-16592216"],
                    [[chr: "22", id: "1000GP"], "chr22:16587172-16609999", "chr22:16592229-16609999"]
                )
                input[3] = Channel.of([
                    [id: "GRCh38"],
                    file(params.pipelines_testdata_base_path + "hum_data/reference_genome/GRCh38.s.fa.gz", checkIfExist:true),
                    file(params.pipelines_testdata_base_path + "hum_data/reference_genome/GRCh38.s.fa.gz.fai", checkIfExist:true),
                ]).collect()
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.versions,
                    workflow.out.vcf_tbi.collect{[
                        it[0],
                        path(it[1]).getFileName().toString(),
                        path(it[2]).getFileName().toString()
                    ] },
                    workflow.out.vcf_tbi.collect{ path(it[1]).vcf.summary },
                    workflow.out.vcf_tbi.collect{ path(it[1]).vcf.header.getGenotypeSamples().sort() }
                ).match() }
            )
        }
    }

    test("Impute with glimpse2 two individuals - input bam  with bamlist") {
        when {
            workflow {
                """
                bamlist = Channel.of(
                    "NA12878.s.bam\tNA12878",
                    "NA19401.s.bam\tNA19401"
                ).collectFile(name: 'bamlist.txt', newLine: true)
                input[0] = Channel.fromList([
                    [
                        [id: "allid"],
                        [
                            file(params.pipelines_testdata_base_path + "hum_data/individuals/NA12878/NA12878.s.bam", checkIfExist:true),
                            file(params.pipelines_testdata_base_path + "hum_data/individuals/NA19401/NA19401.s.bam", checkIfExist:true)
                        ],
                        [
                            file(params.pipelines_testdata_base_path + "hum_data/individuals/NA12878/NA12878.s.bam.bai", checkIfExist:true),
                            file(params.pipelines_testdata_base_path + "hum_data/individuals/NA19401/NA19401.s.bam.bai", checkIfExist:true)
                        ]
                    ],
                ]).combine(bamlist)
                input[1] = Channel.of([
                        [id: "1000GP", chr: "22"],
                        file(params.pipelines_testdata_base_path + "hum_data/panel/chr22/1000GP.chr22.s.norel.vcf.gz", checkIfExist:true),
                        file(params.pipelines_testdata_base_path + "hum_data/panel/chr22/1000GP.chr22.s.norel.vcf.gz.csi", checkIfExist:true),
                    ]).collect()
                input[2] = Channel.of(
                    [[chr: "22", id: "1000GP"], "chr22:16570065-16597215", "chr22:16570065-16592216"],
                    [[chr: "22", id: "1000GP"], "chr22:16587172-16609999", "chr22:16592229-16609999"]
                )
                input[3] = Channel.of([
                    [id: "GRCh38"],
                    file(params.pipelines_testdata_base_path + "hum_data/reference_genome/GRCh38.s.fa.gz", checkIfExist:true),
                    file(params.pipelines_testdata_base_path + "hum_data/reference_genome/GRCh38.s.fa.gz.fai", checkIfExist:true),
                ]).collect()
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.versions,
                    workflow.out.vcf_tbi.collect{[
                        it[0],
                        path(it[1]).getFileName().toString(),
                        path(it[2]).getFileName().toString()
                    ] },
                    workflow.out.vcf_tbi.collect{ path(it[1]).vcf.summary },
                    workflow.out.vcf_tbi.collect{ path(it[1]).vcf.header.getGenotypeSamples().sort() }
                ).match() }
            )
        }
    }

    test("Impute with glimpse2 one individual - input file bam with bamlist") {
        when {
            workflow {
                """
                bamlist = Channel.of(
                    "NA12878.s.bam\tNA12878"
                ).collectFile(name: 'bamlist.txt', newLine: true)
                input[0] = Channel.fromList([
                    [
                        [id: "NA12878"],
                        file(params.pipelines_testdata_base_path + "hum_data/individuals/NA12878/NA12878.s.bam", checkIfExist:true),
                        file(params.pipelines_testdata_base_path + "hum_data/individuals/NA12878/NA12878.s.bam.bai", checkIfExist:true),
                    ]
                ]).combine(bamlist)
                input[1] = Channel.of([
                        [id: "1000GP", chr: "22"],
                        file(params.pipelines_testdata_base_path + "hum_data/panel/chr22/1000GP.chr22.s.norel.vcf.gz", checkIfExist:true),
                        file(params.pipelines_testdata_base_path + "hum_data/panel/chr22/1000GP.chr22.s.norel.vcf.gz.csi", checkIfExist:true),
                    ]).collect()
                input[2] = Channel.of(
                    [[chr: "22", id: "1000GP"], "chr22:16570065-16597215", "chr22:16570065-16592216"],
                    [[chr: "22", id: "1000GP"], "chr22:16587172-16609999", "chr22:16592229-16609999"]
                )
                input[3] = Channel.of([
                    [id: "GRCh38"],
                    file(params.pipelines_testdata_base_path + "hum_data/reference_genome/GRCh38.s.fa.gz", checkIfExist:true),
                    file(params.pipelines_testdata_base_path + "hum_data/reference_genome/GRCh38.s.fa.gz.fai", checkIfExist:true),
                ]).collect()
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.versions,
                    workflow.out.vcf_tbi.collect{[
                        it[0],
                        path(it[1]).getFileName().toString(),
                        path(it[2]).getFileName().toString()
                    ] },
                    workflow.out.vcf_tbi.collect{ path(it[1]).vcf.summary },
                    workflow.out.vcf_tbi.collect{ path(it[1]).vcf.header.getGenotypeSamples().sort() }
                ).match() }
            )
        }
    }
}
