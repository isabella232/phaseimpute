nextflow_workflow {

    name "Test Subworkflow BAM_IMPUTE_STITCH"
    script "../main.nf"
    config "./nextflow.config"

    workflow "BAM_IMPUTE_STITCH"

    tag "subworkflows"
    tag "subworkflows_local"
    tag "subworkflows/bam_impute_stitch"
    tag "bam_impute_stitch"

    tag "stitch"
    tag "bcftools"
    tag "bcftools_index"

    test("Impute with stitch two individuals with bamlist") {
        when {
            params {
                max_cpus   = 2
                max_memory = '2.GB'
            }
            workflow {
                """
                bamlist = Channel.of(
                    "NA12878.s.bam",
                    "NA19401.s.bam"
                ).collectFile(name: 'bamlist.txt', newLine: true)
                ch_samples = Channel.fromList([
                    [
                        [id: "allid"],
                        [
                            file(params.pipelines_testdata_base_path + "hum_data/individuals/NA12878/NA12878.s.bam", checkIfExist:true),
                            file(params.pipelines_testdata_base_path + "hum_data/individuals/NA19401/NA19401.s.bam", checkIfExist:true)
                        ],
                        [
                            file(params.pipelines_testdata_base_path + "hum_data/individuals/NA12878/NA12878.s.bam.bai", checkIfExist:true),
                            file(params.pipelines_testdata_base_path + "hum_data/individuals/NA19401/NA19401.s.bam.bai", checkIfExist:true)
                        ]
                    ],
                ])

                ch_posfile = Channel.of([
                    [id: "1000GP", chr: "chr22"],
                    file(params.pipelines_testdata_base_path + "hum_data/panel/chr22/1000GP.chr22.legend.gz", checkIfExist:true)
                ])

                ch_region = Channel.of([
                    [chr: "chr22", region: "chr22:16570000-16610000"], "chr22:16570000-16610000"
                ])

                input[0] = ch_samples.combine(bamlist)
                input[1] = ch_posfile
                input[2] = ch_region
                input[3] = Channel.of([
                    [id: "GRCh38"],
                    file(params.pipelines_testdata_base_path + "hum_data/reference_genome/GRCh38.s.fa.gz", checkIfExist:true),
                    file(params.pipelines_testdata_base_path + "hum_data/reference_genome/GRCh38.s.fa.gz.fai", checkIfExist:true),
                ]).collect()
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out,
                    workflow.out.vcf_tbi.collect{ path(it[1]).vcf.summary },
                    workflow.out.vcf_tbi.collect{ path(it[1]).vcf.header.getGenotypeSamples().sort() }
                ).match() }
            )
        }
    }
}
