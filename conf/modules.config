/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'NFCORE_PHASEIMPUTE:PHASEIMPUTE:MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Stats
    // Simulation
    // Coverage process
    withName: 'NFCORE_PHASEIMPUTE:PHASEIMPUTE:SAMTOOLS_COVERAGE_INP' {
        cache = "lenient"
        ext.prefix = { "${meta.id}.truth.allchr" }
        publishDir = [ enabled: false ]
    }
    withName: 'NFCORE_PHASEIMPUTE:PHASEIMPUTE:SAMTOOLS_COVERAGE_DWN' {
        cache = "lenient"
        ext.prefix = { "${meta.id}.allchr" }
        publishDir = [ enabled: false ]
    }

    // Filter chromosomes in coverage
    withName: 'NFCORE_PHASEIMPUTE:PHASEIMPUTE:FILTER_CHR_INP' {
        ext.prefix = { "${meta.id}.truth" }
        publishDir = [ enabled: false ]
    }

    withName: 'NFCORE_PHASEIMPUTE:PHASEIMPUTE:FILTER_CHR_DWN' {
        ext.prefix = { "${meta.id}" }
        publishDir = [ enabled: false ]
    }

    // VCF
    // PANEL
    withName: 'NFCORE_PHASEIMPUTE:PHASEIMPUTE:BCFTOOLS_STATS_PANEL' {
        ext.prefix = { "${meta.id}.panel" }
        publishDir = [
            path: { "${params.outdir}/prep_panel/stats/" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // TRUTH
    withName: 'NFCORE_PHASEIMPUTE:PHASEIMPUTE:BCFTOOLS_STATS_TRUTH' {
        ext.prefix = { "${meta.id}.truth" }
        publishDir = [
            path: { "${params.outdir}/validation/stats" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // IMPUTE
    withName: 'NFCORE_PHASEIMPUTE:PHASEIMPUTE:BCFTOOLS_STATS_TOOLS' {
        ext.prefix = { "${meta.id}.${meta.tools}" }
        publishDir = [
            path: { "${params.outdir}/imputation/stats" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NFCORE_PHASEIMPUTE:PHASEIMPUTE:LIST_TO_FILE' {
        tag = { "${meta.id}" }
        ext.prefix = { "${meta.id}.batch${meta.batch}" }
        publishDir = [
            path: { "${params.outdir}/imputation/batch" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Compute sample files for renaming
    withName: 'NFCORE_PHASEIMPUTE:PHASEIMPUTE:BCFTOOLS_QUERY_IMPUTED' {
        tag = { "${meta.id} Batch ${meta.batch} ${meta.tools}" }
        ext.args = '--list-samples'
        publishDir = [enabled: false]
    }

    withName: 'NFCORE_PHASEIMPUTE:PHASEIMPUTE:GAWK_IMPUTED' {
        tag = { "${meta.id} Batch ${meta.batch} ${meta.tools}" }
        ext.prefix = { "${meta.id}_samples"}
        ext.args2  = { "-v tools=\"${meta.tools}\" " + "'BEGIN { OFS = \"\\t\" } { print \$1, \"-\", \$1\".\"tools }'" }
        publishDir = [enabled: false]
    }

    // Split by samples for each tool
    withName: 'NFCORE_PHASEIMPUTE:PHASEIMPUTE:SPLIT_IMPUTED:BCFTOOLS_PLUGINSPLIT' {
        tag = { "${meta.id} Batch ${meta.batch} ${meta.tools}" }
        ext.args   = ["--output-type z", "--write-index=tbi"].join(' ')
        publishDir = [
            path: { "${params.outdir}/imputation/${meta.tools}/samples/" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
